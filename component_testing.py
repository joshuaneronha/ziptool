from ziptool.pipeline import *
import pandas as pd
import geopandas as gpd
import numpy as np
ipums_df = pd.read_csv('/Users/joshuaneronha/Documents/Brown/Policy Lab/ziptool/acs_data/usa_00013.csv')

tracts_to_puma_test(tracts, state_fips_code)
get_shape_files('10')

tracts, state_fips_code = zip_to_tract('79835')

def tracts_to_puma(tracts, state_fip_code: str):
    """
    Takes in a list of tracts and ratios for a given zip code (in a given state) and returns the PUMAs
    composing the ZIP code with ratios (i.e. 88% in PUMA 00101 and 12% in PUMA 00102).

    Args:
        tracts: a 2D list generated by zip_to_tract containing census tracts and weighted_ratios
        state_fip_code: string representing state of interest

    Returns:
        series containing ratio of population for each PUMA
    """
    global ALBERS_EPSG_ID
    ALBERS_EPSG_ID = 5070

    intersection_gdf = get_state_intersections(state_fip_code)
    intersection_gdf["shape_area"] = intersection_gdf.area
    intersection_gdf["GEOID"] = intersection_gdf["GEOID"].astype("int")

    # TODO(jn): Make this comprehensible
    grouped_gdf = intersection_gdf.groupby("GEOID").agg(lambda x: list(x))[
        ["PUMACE10", "shape_area"]
    ]
    grouped_gdf["ratios"] = grouped_gdf["shape_area"].apply(
        lambda x: [y / sum(x) for y in x]
    )

    sorted = grouped_gdf.loc[[int(x[0]) for x in tracts]][
        ["PUMACE10", "ratios"]
    ].explode(column=["PUMACE10", "ratios"])
    sorted["ratios"] = sorted["ratios"].apply(lambda x: 1 if x > 0.99 else x)
    out = sorted[sorted["ratios"] > (1 - 0.99)]
    joined = out.join(
        pd.DataFrame(tracts).astype({0: "int", 1: "float32"}).set_index(0)
    )
    joined["weighted_ratios"] = joined["ratios"] * joined[1]
    return joined.groupby("PUMACE10").sum()["weighted_ratios"]

def tracts_to_puma_test(tracts, state_fip_code: str):
    """
    Takes in a list of tracts and ratios for a given zip code (in a given state) and returns the PUMAs
    composing the ZIP code with ratios (i.e. 88% in PUMA 00101 and 12% in PUMA 00102).

    Args:
        tracts: a 2D list generated by zip_to_tract containing census tracts and weighted_ratios
        state_fip_code: string representing state of interest

    Returns:
        series containing ratio of population for each PUMA
    """
    global ALBERS_EPSG_ID
    ALBERS_EPSG_ID = 5070

    intersection_gdf = get_state_intersections(state_fip_code)
    intersection_gdf["shape_area"] = intersection_gdf.area
    intersection_gdf["GEOID"] = intersection_gdf["GEOID"].astype("int")

    alpha = intersection_gdf[["GEOID", "PUMACE10", "shape_area"]].set_index("GEOID")
    bravo = intersection_gdf[["GEOID", "PUMACE10", "shape_area"]].groupby('GEOID').sum()

    charlie = alpha.join(bravo,rsuffix='_total',how='inner')
    charlie['ratio'] = charlie['shape_area'] / charlie['shape_area_total']

    tracts_of_interest = [int(x[0]) for x in tracts]

    delta = charlie[["PUMACE10", "ratio"]].loc[tracts_of_interest]
    delta["rounded_ratio"] = delta["ratio"].apply(lambda x: 1 if x > 0.99 else x)
    echo = delta[delta["rounded_ratio"] > (1 - 0.99)]
    foxtrot =  echo.join(
            pd.DataFrame(tracts, columns = ["GEOID", "PUMARAT"]).astype({"GEOID": "int", "PUMARAT": "float32"}).set_index("GEOID")
        )
    foxtrot["weighted_ratios"] = foxtrot["rounded_ratio"] * foxtrot["PUMARAT"]

    return foxtrot.groupby("PUMACE10").sum()["weighted_ratios"]

tracts, state_fips_code = zip_to_tract('75201')

tracts_to_puma(tracts, state_fips_code)
tracts_to_puma_test(tracts, state_fips_code)
